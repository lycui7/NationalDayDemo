Listener(监听器)   Filter(过滤器)     Intercepter(拦截器)
    重点：1.web.xml 的加载顺序是：ServletContext -> context-param -> listener -> filter -> servlet ，
            而同个类型之间的实际程序调用的时候的顺序是根据对应的 mapping 的顺序进行调用的。
          2.servlet生命周期：实例化 -> 初始化init -> 服务service -> 销毁destroy
一 Listener
监听域对象的创建与销毁
1.监听ServletContext创建与销毁   ServletContextListener
2.监听HttpSession创建与销毁   HttpSessionListener
3.监听HttpServletRequest创建与销毁  ServletRequestListener
监听域对象的属性变化
1.监听ServletContext属性变化   ServletContextAttributeListener
2.监听HttpSession属性变化   HttpSessionAttributeListener
3.监听HttpServletRequest属性变化   ServletRequestAttributeListener

二 Filter(Javaweb中的过滤器可以拦截所有访问web资源的请求或响应操作。)
    重点：FilterChain
        它提供了对某一资源的已过滤请求调用链的视图。
        过滤器使用 FilterChain 调用链中的下一个过滤器，
        如果调用的过滤器是链中的最后一个过滤器，则调用链末尾的资源。

=》自己模拟实现一个全局编码过滤器（可以处理get,post）

三 Interceptor(拦截器类似于Servlet 开发中的过滤器Filter，用于对处理器进行预处理和后处理)
=>一般用来做登陆验证，权限拦截
    重点：自定义拦截器需要实现HandlerInterceptor接口
          三个方法  preHandle()         进入 Handler方法之前执行
                    postHandle()        进入Handler方法之后，返回modelAndView之前执行
                    afterCompletion()   执行Handler完成后执行此方法
          多个拦截器的方法执行顺序
                    preHandle按拦截器定义顺序调用
                    postHandler按拦截器定义逆序调用
                    afterCompletion按拦截器定义逆序调用
                    postHandler在拦截器链内所有拦截器返成功(都为true)调用
                    afterCompletion只有preHandle返回true才调用